import numpy as np

# Lecture en little-endian natif
data_little = np.fromfile("fichier.dat", dtype='float32')

# Lecture en big-endian (correct si fichier = struct.pack('>f'))
data_big = np.fromfile("fichier.dat", dtype='>f4')

print("=== Little-endian ===")
print("Min:", data_little.min(), "Max:", data_little.max())
print("First 5:", data_little[:5])

print("\n=== Big-endian ===")
print("Min:", data_big.min(), "Max:", data_big.max())
print("First 5:", data_big[:5])

Observation	Ce que ça veut dire
Min cassé en float32 natif	Fichier n’est pas little-endian
Min OK en '>f4'	Fichier est bien en big-endian
Max cassé en '>f4'	Peut-être que tu lis trop de valeurs (count)
Max OK en float32	Pur hasard — mauvaise lecture mais résultat plausible

data = np.fromfile("fichier.dat", dtype='>f4', count=pixel_count)


Si jamais ça ne marchepas : 

🔥 Solution fiable (et souvent plus robuste) : utiliser np.frombuffer() après lecture avec open
Voici un exemple béton :

python
Copier
Modifier
with open("fichier.dat", "rb") as f:
    raw = f.read()  # lit tout le fichier binaire

data = np.frombuffer(raw, dtype='>f4')
➡️ Là tu es sûr que :

tu maîtrises le buffer brut

NumPy l’interprète strictement selon ton dtype ('>f4')

aucun bug de fromfile (qui peut être capricieux selon le système, le terminal, l'encodage, etc.)

