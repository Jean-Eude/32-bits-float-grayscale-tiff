flou filtre = 22

void processMaskAndFitCircles(const std::vector<std::vector<double>>& mask) {
    int height = mask.size();
    if (height == 0) return;
    int width = mask[0].size();

    std::vector<std::vector<int>> labels(height, std::vector<int>(width, 0));
    int current_label = 1;
    std::unordered_map<int, std::vector<std::pair<uint32_t, uint32_t>>> components;

    // Détection des composantes connexes
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            if (mask[y][x] > 0 && labels[y][x] == 0) {
                std::queue<std::pair<int, int>> q;
                q.push({x, y});
                labels[y][x] = current_label;

                while (!q.empty()) {
                    auto [cx, cy] = q.front(); q.pop();
                    components[current_label].emplace_back(cx, cy);

                    const int dx[] = {1, -1, 0, 0};
                    const int dy[] = {0, 0, 1, -1};

                    for (int dir = 0; dir < 4; ++dir) {
                        int nx = cx + dx[dir];
                        int ny = cy + dy[dir];
                        if (nx >= 0 && ny >= 0 && nx < width && ny < height &&
                            mask[ny][nx] > 0 && labels[ny][nx] == 0) {
                            labels[ny][nx] = current_label;
                            q.push({nx, ny});
                        }
                    }
                }
                ++current_label;
            }
        }
    }

    // Ajustement de cercle pour chaque composante
    std::vector<Circle> circles;
    for (const auto& [label, points] : components) {
        if (points.size() < 3) continue;

        Eigen::MatrixXd A(points.size(), 3);
        Eigen::VectorXd B(points.size());

        for (size_t i = 0; i < points.size(); ++i) {
            double x = static_cast<double>(points[i].first);
            double y = static_cast<double>(points[i].second);
            A(i, 0) = 2.0 * x;
            A(i, 1) = 2.0 * y;
            A(i, 2) = 1.0;
            B(i) = x * x + y * y;
        }

        Eigen::Vector3d sol = A.colPivHouseholderQr().solve(B);
        double xc = sol(0);
        double yc = sol(1);
        double c = sol(2);
        double radius = std::sqrt(xc * xc + yc * yc + c);
        circles.push_back({xc, yc, radius});
    }

    int nbCircles = static_cast<int>(circles.size());
    if (nbCircles < 2) {
        std::cerr << "[INFO] Pas assez de cercles détectés.\n";
        return;
    }

    // Génération asciiPlan étendu
    std::ostringstream oss;
    bool supported = true;
    switch (nbCircles) {
        case 2: oss << "1 2"; break;
        case 3: oss << "1 2 3"; break;
        case 4: oss << "1 2\n3 4"; break;
        case 5: oss << "1 2 3\n4 5"; break;
        case 6: oss << "1 2 3\n4 5 6"; break;
        case 7: oss << "1 2 3\n4 5 6\n7"; break;
        case 8: oss << "1 2 3\n4 5 6\n7 8"; break;
        case 9: oss << "1 2 3\n4 5 6\n7 8 9"; break;
        case 10: oss << "1 2 3 4 5\n6 7 8 9 10"; break;
        case 12: oss << "1 2 3 4\n5 6 7 8\n9 10 11 12"; break;
        case 15: oss << "1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15"; break;
        case 16: oss << "1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16"; break;
        default:
            supported = false;
            break;
    }

    if (!supported) {
        std::cerr << "[INFO] Aucun plan ASCII défini pour " << nbCircles << " cercles.\n";
        return;
    }

    std::string asciiPlan = oss.str();

    // Parsing du plan logique
    std::map<int, std::pair<double, double>> logicalPositions;
    std::istringstream iss(asciiPlan);
    std::string line;
    int row = 0, maxCol = 0;
    while (std::getline(iss, line)) {
        std::istringstream lineStream(line);
        std::string token;
        int col = 0;
        while (lineStream >> token) {
            if (std::isdigit(token[0])) {
                int id = std::stoi(token);
                logicalPositions[id] = {static_cast<double>(col), static_cast<double>(row)};
            }
            ++col;
        }
        maxCol = std::max(maxCol, col - 1);
        ++row;
    }
    int maxRow = row - 1;

    // Normalisation des centres détectés
    double minX = std::numeric_limits<double>::max(), maxX = -minX;
    double minY = std::numeric_limits<double>::max(), maxY = -minY;
    for (const auto& c : circles) {
        minX = std::min(minX, c.xc);
        maxX = std::max(maxX, c.xc);
        minY = std::min(minY, c.yc);
        maxY = std::max(maxY, c.yc);
    }

    std::vector<std::pair<double, double>> normCenters;
    for (const auto& c : circles) {
        double nx = (c.xc - minX) / (maxX - minX + 1e-9);
        double ny = (c.yc - minY) / (maxY - minY + 1e-9);
        normCenters.emplace_back(nx, ny);
    }

    // Appariement logique -> cercles détectés
    std::vector<Circle> ordered(nbCircles);
    std::vector<bool> taken(nbCircles, false);
    for (const auto& [id, logicalPos] : logicalPositions) {
        double bestDist = std::numeric_limits<double>::max();
        int bestIndex = -1;
        double normX = logicalPos.first / static_cast<double>(maxCol + 1);
        double normY = logicalPos.second / static_cast<double>(maxRow + 1);
        for (int i = 0; i < nbCircles; ++i) {
            if (taken[i]) continue;
            double dx = normCenters[i].first - normX;
            double dy = normCenters[i].second - normY;
            double dist = dx * dx + dy * dy;
            if (dist < bestDist) {
                bestDist = dist;
                bestIndex = i;
            }
        }
        if (bestIndex >= 0) {
            ordered[id - 1] = circles[bestIndex];
            taken[bestIndex] = true;
        }
    }

    // Affichage final
    for (size_t i = 0; i < ordered.size(); ++i) {
        const auto& c = ordered[i];
        std::cout << "Centre #" << (i + 1)
                  << " : (" << c.xc << ", " << c.yc
                  << "), Rayon = " << c.radius << "\n";
    }
}
