#include <iostream>
#include <fstream>
#include <vector>
#include <string>

int main() {
    // Nom du fichier CSV
    std::string filename = "donnees.csv";

    // Créer un flux de sortie
    std::ofstream fichier(filename);

    // Vérifier si le fichier s'est bien ouvert
    if (!fichier.is_open()) {
        std::cerr << "Erreur lors de l'ouverture du fichier !" << std::endl;
        return 1;
    }

    // Écrire l'en-tête (facultatif)
    fichier << "Nom,Age,Ville\n";

    // Écrire quelques lignes de données
    fichier << "Alice,30,Paris\n";
    fichier << "Bob,25,Lyon\n";
    fichier << "Claire,28,Marseille\n";

    // Fermer le fichier
    fichier.close();

    std::cout << "Fichier CSV créé avec succès !" << std::endl;

    return 0;
}

#include <cmath>
#include <algorithm>
#include <limits>

float computePSNR(const TiFF& img1, const TiFF& img2) {
    if (img1.getWidth() != img2.getWidth() || img1.getHeight() != img2.getHeight())
        return -1.0f;

    double mse = 0.0;
    double maxPixelValue = 0.0;
    uint32_t width = img1.getWidth(), height = img1.getHeight();

    for (uint32_t y = 0; y < height; ++y) {
        for (uint32_t x = 0; x < width; ++x) {
            double px1 = static_cast<double>(img1.getPixel(x, y));
            double px2 = static_cast<double>(img2.getPixel(x, y));

            double diff = px1 - px2;
            mse += diff * diff;

            maxPixelValue = std::max({maxPixelValue, px1, px2});
        }
    }

    mse /= static_cast<double>(width * height);
    if (mse == 0.0) return INFINITY;

    return static_cast<float>(10.0 * std::log10((maxPixelValue * maxPixelValue) / mse));
}

#include <cmath>
#include <algorithm>
#include <limits>

float computeSSIM(const TiFF& img1, const TiFF& img2) {
    if (img1.getWidth() != img2.getWidth() || img1.getHeight() != img2.getHeight())
        return -1.0f;

    double mu_x = 0.0, mu_y = 0.0;
    double sigma_x = 0.0, sigma_y = 0.0, sigma_xy = 0.0;
    double maxPixelValue = 0.0;

    uint32_t width = img1.getWidth(), height = img1.getHeight();
    uint64_t N = static_cast<uint64_t>(width) * height;

    // Calcul des moyennes + max pixel
    for (uint32_t y = 0; y < height; ++y) {
        for (uint32_t x = 0; x < width; ++x) {
            double px1 = static_cast<double>(img1.getPixel(x, y));
            double px2 = static_cast<double>(img2.getPixel(x, y));

            mu_x += px1;
            mu_y += px2;

            maxPixelValue = std::max({maxPixelValue, px1, px2});
        }
    }

    mu_x /= N;
    mu_y /= N;

    // Calcul des variances et covariance
    for (uint32_t y = 0; y < height; ++y) {
        for (uint32_t x = 0; x < width; ++x) {
            double px1 = static_cast<double>(img1.getPixel(x, y));
            double px2 = static_cast<double>(img2.getPixel(x, y));

            sigma_x += (px1 - mu_x) * (px1 - mu_x);
            sigma_y += (px2 - mu_y) * (px2 - mu_y);
            sigma_xy += (px1 - mu_x) * (px2 - mu_y);
        }
    }

    sigma_x /= N;
    sigma_y /= N;
    sigma_xy /= N;

    const double C1 = (0.01 * maxPixelValue) * (0.01 * maxPixelValue);
    const double C2 = (0.03 * maxPixelValue) * (0.03 * maxPixelValue);

    double numerator = (2 * mu_x * mu_y + C1) * (2 * sigma_xy + C2);
    double denominator = (mu_x * mu_x + mu_y * mu_y + C1) * (sigma_x + sigma_y + C2);

    return static_cast<float>(numerator / denominator);
}




void processMaskAndFitCircles(const std::vector<std::vector<double>>& mask) {
    int height = mask.size();
    if (height == 0) return;
    int width = mask[0].size();

    std::vector<std::vector<int>> labels(height, std::vector<int>(width, 0));
    int current_label = 1;
    std::unordered_map<int, std::vector<std::pair<uint32_t, uint32_t>>> components;

    // Détection des composantes connexes
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            if (mask[y][x] > 0 && labels[y][x] == 0) {
                std::queue<std::pair<int, int>> q;
                q.push({x, y});
                labels[y][x] = current_label;

                while (!q.empty()) {
                    auto [cx, cy] = q.front(); q.pop();
                    components[current_label].emplace_back(cx, cy);

                    const int dx[] = {1, -1, 0, 0};
                    const int dy[] = {0, 0, 1, -1};

                    for (int dir = 0; dir < 4; ++dir) {
                        int nx = cx + dx[dir];
                        int ny = cy + dy[dir];
                        if (nx >= 0 && ny >= 0 && nx < width && ny < height &&
                            mask[ny][nx] > 0 && labels[ny][nx] == 0) {
                            labels[ny][nx] = current_label;
                            q.push({nx, ny});
                        }
                    }
                }

                ++current_label;
            }
        }
    }

    // Ajustement de cercle pour chaque composante
    std::vector<Circle> circles;
    for (const auto& [label, points] : components) {
        if (points.size() < 3) continue;

        Eigen::MatrixXd A(points.size(), 3);
        Eigen::VectorXd B(points.size());

        for (size_t i = 0; i < points.size(); ++i) {
            double x = static_cast<double>(points[i].first);
            double y = static_cast<double>(points[i].second);
            A(i, 0) = 2.0 * x;
            A(i, 1) = 2.0 * y;
            A(i, 2) = 1.0;
            B(i) = x * x + y * y;
        }

        Eigen::Vector3d sol = A.colPivHouseholderQr().solve(B);
        double xc = sol(0);
        double yc = sol(1);
        double c = sol(2);
        double radius = std::sqrt(xc * xc + yc * yc + c);

        circles.push_back({xc, yc, radius});
    }

    int nbCircles = static_cast<int>(circles.size());
    std::string asciiPlan;

    // Choisir le plan en fonction du nombre de cercles
    if (nbCircles == 4) {
        asciiPlan = "1 2\n3 4";
    } else if (nbCircles == 6) {
        asciiPlan = "1 2 3\n4 5 6";
    } else if (nbCircles == 9) {
        asciiPlan = "1 2 3\n4 5 6\n7 8 9";
    } else {
        std::cerr << "[INFO] Aucun plan ASCII défini pour " << nbCircles << " cercles.\n";
        return;
    }

    // Même suite que précédemment : parser plan, normaliser, apparier...
    std::map<int, std::pair<double, double>> logicalPositions;
    std::istringstream iss(asciiPlan);
    std::string line;
    int row = 0;
    while (std::getline(iss, line)) {
        std::istringstream lineStream(line);
        std::string token;
        int col = 0;
        while (lineStream >> token) {
            if (std::isdigit(token[0])) {
                int id = std::stoi(token);
                logicalPositions[id] = {static_cast<double>(col), static_cast<double>(row)};
            }
            ++col;
        }
        ++row;
    }

    // Normalisation des centres
    double minX = std::numeric_limits<double>::max(), maxX = -minX;
    double minY = std::numeric_limits<double>::max(), maxY = -minY;

    for (const auto& c : circles) {
        minX = std::min(minX, c.xc);
        maxX = std::max(maxX, c.xc);
        minY = std::min(minY, c.yc);
        maxY = std::max(maxY, c.yc);
    }

    std::vector<std::pair<double, double>> normCenters;
    for (const auto& c : circles) {
        double nx = (c.xc - minX) / (maxX - minX + 1e-9);
        double ny = (c.yc - minY) / (maxY - minY + 1e-9);
        normCenters.emplace_back(nx, ny);
    }

    // Appariement logique vers centres détectés
    std::vector<Circle> ordered(nbCircles);
    std::vector<bool> taken(nbCircles, false);

    for (const auto& [id, logicalPos] : logicalPositions) {
        double bestDist = std::numeric_limits<double>::max();
        int bestIndex = -1;

        for (int i = 0; i < nbCircles; ++i) {
            if (taken[i]) continue;

            double normX = logicalPos.first / logicalPositions.size();
            double normY = logicalPos.second / logicalPositions.size();

            double dx = normCenters[i].first - normX;
            double dy = normCenters[i].second - normY;
            double dist = dx * dx + dy * dy;

            if (dist < bestDist) {
                bestDist = dist;
                bestIndex = i;
            }
        }

        if (bestIndex >= 0) {
            ordered[id - 1] = circles[bestIndex];
            taken[bestIndex] = true;
        }
    }

    // Affichage final
    for (size_t i = 0; i < ordered.size(); ++i) {
        const auto& c = ordered[i];
        std::cout << "Centre #" << (i + 1)
                  << " : (" << c.xc << ", " << c.yc
                  << "), Rayon = " << c.radius << "\n";
    }
}

void listFilesRecursivelyHelper(const std::string& path, std::vector<std::string>& result) {
    DIR* dir = opendir(path.c_str());
    if (!dir) {
        std::cerr << "Erreur : impossible d'ouvrir le dossier '" << path << "'." << std::endl;
        return;
    }

    struct dirent* entry;
    while ((entry = readdir(dir)) != nullptr) {
        std::string name = entry->d_name;
        if (name == "." || name == "..") continue;

        std::string fullPath = path + "/" + name;

        struct stat info;
        if (stat(fullPath.c_str(), &info) != 0) {
            std::cerr << "Erreur : impossible d'accéder à '" << fullPath << "'." << std::endl;
            continue;
        }

        if (S_ISDIR(info.st_mode)) {
            // Si c'est un dossier, appeler récursivement
            listFilesRecursivelyHelper(fullPath, result);
        } else if (S_ISREG(info.st_mode)) {
            // Si c'est un fichier régulier, vérifier l'extension
            size_t pos = name.rfind(".tif");
            if (pos != std::string::npos && pos == name.length() - 4) {
                result.push_back(fullPath);  // Ajouter le chemin complet
            }
        }
    }

    closedir(dir);
}

std::vector<std::string> listFiles(const std::string& path) {
    std::vector<std::string> files;
    listFilesRecursivelyHelper(path, files);
    return files;
}

} // namespace Filesystem


