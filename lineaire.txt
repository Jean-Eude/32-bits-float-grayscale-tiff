 C++ Version Using Eigen:

#include <iostream>
#include <vector>
#include <Eigen/Dense>

int main() {
    // Example input vectors
    std::vector<double> xtrou = {1.0, 2.0, 3.0};
    std::vector<double> ztrou = {4.0, 5.0, 6.0};
    size_t n = xtrou.size();

    // Create Eigen matrices
    Eigen::MatrixXd A(n, 3);
    Eigen::VectorXd b(n);

    // Fill A and b
    for (size_t i = 0; i < n; ++i) {
        A(i, 0) = xtrou[i];
        A(i, 1) = ztrou[i];
        A(i, 2) = 1.0;
        b(i) = - (xtrou[i] * xtrou[i] + ztrou[i] * ztrou[i]);
    }

    // Solve using least squares
    Eigen::VectorXd abc = A.colPivHouseholderQr().solve(b);

    // Output result
    std::cout << "abc = \n" << abc << std::endl;

    return 0;
}

Requirements:

    Install Eigen (https://eigen.tuxfamily.org)

    Compile with:

    g++ -std=c++11 yourfile.cpp -o yourprog

Would you prefer a version without any external libraries (pure C++)?
You said:
and then a=abc(0), b=abc(1)Yes, exactly!

After solving the system with Eigen:

Eigen::VectorXd abc = A.colPivHouseholderQr().solve(b);

You can extract the values like this:

double a = abc(0);
double b = abc(1);
double c = abc(2);  // optional, the constant term

These correspond to the coefficients in the fitted equation:

a * x + b * z + c ≈ - (x^2 + z^2)

--------------------------------------------------------------

#include <iostream>
#include <vector>
#include <stdexcept>
#include <string>
#include <algorithm>

// Perform 2D convolution on row-major std::vector<double> matrices
std::vector<double> conv2(
    const std::vector<double>& A, int a_rows, int a_cols,
    const std::vector<double>& B, int b_rows, int b_cols,
    int& out_rows, int& out_cols,
    const std::string& mode = "full")
{
    if (a_rows <= 0 || a_cols <= 0 || b_rows <= 0 || b_cols <= 0)
        throw std::invalid_argument("Matrix dimensions must be positive");

    int full_rows = a_rows + b_rows - 1;
    int full_cols = a_cols + b_cols - 1;
    std::vector<double> full(full_rows * full_cols, 0.0);

    // Full convolution
    for (int i = 0; i < a_rows; ++i) {
        for (int j = 0; j < a_cols; ++j) {
            double a_val = A[i * a_cols + j];
            for (int m = 0; m < b_rows; ++m) {
                for (int n = 0; n < b_cols; ++n) {
                    int r = i + m;
                    int c = j + n;
                    full[r * full_cols + c] += a_val * B[m * b_cols + n];
                }
            }
        }
    }

    // Handle output mode
    if (mode == "full") {
        out_rows = full_rows;
        out_cols = full_cols;
        return full;
    } else if (mode == "same") {
        int row_offset = (b_rows - 1) / 2;
        int col_offset = (b_cols - 1) / 2;
        out_rows = a_rows;
        out_cols = a_cols;
        std::vector<double> same(out_rows * out_cols);

        for (int i = 0; i < out_rows; ++i) {
            for (int j = 0; j < out_cols; ++j) {
                int full_i = i + row_offset;
                int full_j = j + col_offset;
                same[i * out_cols + j] = full[full_i * full_cols + full_j];
            }
        }
        return same;
    } else if (mode == "valid") {
        if (a_rows < b_rows || a_cols < b_cols)
            throw std::invalid_argument("A must be larger than B for 'valid' mode");

        out_rows = a_rows - b_rows + 1;
        out_cols = a_cols - b_cols + 1;
        std::vector<double> valid(out_rows * out_cols);

        for (int i = 0; i < out_rows; ++i) {
            for (int j = 0; j < out_cols; ++j) {
                double sum = 0.0;
                for (int m = 0; m < b_rows; ++m) {
                    for (int n = 0; n < b_cols; ++n) {
                        int a_i = i + m;
                        int a_j = j + n;
                        sum += A[a_i * a_cols + a_j] * B[m * b_cols + n];
                    }
                }
                valid[i * out_cols + j] = sum;
            }
        }
        return valid;
    } else {
        throw std::invalid_argument("Unsupported mode. Use 'full', 'same', or 'valid'.");
    }
}

// Debug: print a 2D matrix from a 1D vector
void printMatrix(const std::vector<double>& mat, int rows, int cols) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j)
            std::cout << mat[i * cols + j] << " ";
        std::cout << "\n";
    }
}

// Example usage
int main() {
    std::vector<double> A = {
        1, 2, 3,
        4, 5, 6
    };
    int a_rows = 2, a_cols = 3;

    std::vector<double> B = {
        1, 0,
        0, -1
    };
    int b_rows = 2, b_cols = 2;

    int out_rows, out_cols;

    std::cout << "--- FULL ---\n";
    auto C_full = conv2(A, a_rows, a_cols, B, b_rows, b_cols, out_rows, out_cols, "full");
    printMatrix(C_full, out_rows, out_cols);

    std::cout << "--- SAME ---\n";
    auto C_same = conv2(A, a_rows, a_cols, B, b_rows, b_cols, out_rows, out_cols, "same");
    printMatrix(C_same, out_rows, out_cols);

    std::cout << "--- VALID ---\n";
    auto C_valid = conv2(A, a_rows, a_cols, B, b_rows, b_cols, out_rows, out_cols, "valid");
    printMatrix(C_valid, out_rows, out_cols);

    return 0;
}


---------------------------------
ty = zeros(t1, t2); = std::vector<double> ty(t1 * t2, 0.0);
------------------------------
ty(2:t1-1, 2:t2-1) = ty(2:t1-1, 2:t2-1) | (laplacian(2:t1-1, 2:t2-1) == ty(2:t1-1, 2:t2-1)); =
 for (int i = 1; i < t1 - 1; ++i) {
    for (int j = 1; j < t2 - 1; ++j) {
        int idx = i * t2 + j;
        bool ty_val = static_cast<bool>(ty[idx]);
        bool condition = (laplacian[idx] == ty[idx]);
        ty[idx] = static_cast<double>(ty_val || condition);
    }
}


-------------------------------------

[x2​ z2​ xz​ x​ z​ 1​] ⋅ pcoeffs = Il

#include <iostream>
#include <vector>
#include <Eigen/Dense>

void fit_quadratic_surface(
    const std::vector<double>& masque,  // binary mask (row-major)
    const std::vector<double>& Il,      // values at those positions
    int rows, int cols)
{
    std::vector<int> xl, zl;
    
    // Find non-zero indices
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            int idx = i * cols + j;
            if (masque[idx] != 0) {
                zl.push_back(i); // row
                xl.push_back(j); // col
            }
        }
    }

    int nl = xl.size();
    Eigen::MatrixXd A(nl, 6);
    Eigen::VectorXd b(nl);

    for (int i = 0; i < nl; ++i) {
        double x = static_cast<double>(xl[i]);
        double z = static_cast<double>(zl[i]);
        A(i, 0) = x * x;
        A(i, 1) = z * z;
        A(i, 2) = x * z;
        A(i, 3) = x;
        A(i, 4) = z;
        A(i, 5) = 1.0;
        b(i) = Il[i];
    }

    // Solve least squares
    Eigen::VectorXd pcoeffs = A.colPivHouseholderQr().solve(b);
    std::cout << "Coefficients:\n" << pcoeffs << std::endl;
}

In MATLAB, this:

pcoeffs(3)

returns the third coefficient from the pcoeffs vector (which is a scalar), specifically the coefficient of the cross term x * z in your quadratic surface fit:

[x^2, z^2, x*z, x, z, 1] * pcoeffs

So pcoeffs(3) is the coefficient for x * z.
✅ In C++ with Eigen:

double cross_term_coeff = pcoeffs(2);  // Index 2 = third element (0-based indexing)

This gives you the same value as pcoeffs(3) in MATLAB.





