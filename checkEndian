bool isLittleEndian() {
    uint16_t x = 1;
    return *reinterpret_cast<uint8_t*>(&x) == 1;
}

#include <cstdint>
#include <cstring>
#include <type_traits>

template <typename T>
T swapEndian(T val) {
    static_assert(std::is_trivially_copyable<T>::value, "swapEndian requires trivially copyable type");

    T result;
    uint8_t* src = reinterpret_cast<uint8_t*>(&val);
    uint8_t* dst = reinterpret_cast<uint8_t*>(&result);

    for (size_t i = 0; i < sizeof(T); ++i) {
        dst[i] = src[sizeof(T) - 1 - i];
    }

    return result;
}

void zeo2tr() {
	read(spe)
	
	spe.dimx = npix1
	spe.dimx = npix2
	flipud(spe)

	voir le read.	
	
	write(ims)
}

void read(const std::string& filename) override {
    std::ifstream file(filename, std::ios::binary);
    if (!file) {
        std::cerr << "Erreur lecture XZ\n";
        return;
    }

    bool machineIsLittle = isLittleEndian();
    bool fileIsLittle = true;  // ← à adapter si tu as un champ magic number

    file.read(reinterpret_cast<char*>(&width), sizeof(width));
    file.read(reinterpret_cast<char*>(&height), sizeof(height));
    file.read(reinterpret_cast<char*>(&scale), sizeof(scale));
    file.read(reinterpret_cast<char*>(&depth), sizeof(depth));

    if (machineIsLittle != fileIsLittle) {
        width  = swapEndian(width);
        height = swapEndian(height);
        scale  = swapEndian(scale);
        depth  = swapEndian(depth);
    }

    size_t count = width * height;
    data.resize(count);

    for (size_t i = 0; i < count; ++i) {
        float val;
        file.read(reinterpret_cast<char*>(&val), sizeof(float));

        if (machineIsLittle != fileIsLittle)
            val = swapEndian(val);

        data[i] = new float(val);
    }

    file.close();
}
